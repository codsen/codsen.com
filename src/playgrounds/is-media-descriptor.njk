<h2>{{ packageName }} <sup title="current version is {{ packageJsons[packageName].version }}" aria-label="current version is {{ packageJsons[packageName].version }}">{{ packageJsons[packageName].version }}</sup></h2>
<div id="app">  
  presets:
  <button v-on:click="example0">initial</button>
  <button v-on:click="example1">missing comma</button>
  <button v-on:click="example2">two media types</button>
  <button v-on:click="example3">just only</button>
  <button v-on:click="example4">not + condition</button>
  <button v-on:click="example5">missing type</button>
  <button v-on:click="example6">mismatching bracket count</button>
  <button v-on:click="example7">empty pair</button>
  <button v-on:click="example8">dangling "and"</button>
  
  <div class="playground-app playground-app-is-media-d">
    <div class="playground-app-is-media-d__container">
      <div class="playground-app-is-media-d__labels">@media</div>
      <div class="playground-app-is-media-d__field">
        <textarea ref="in" type="text" v-model="text1" onInput="this.parentNode.dataset.value = this.value" size="1" placeholder="type here"></textarea>
      </div>
      <div class="playground-app-is-media-d__labels">{</div>
    </div>
    <div>
      <h3>output:</h3>
      <textarea ref="out" v-model="text2" readonly></textarea>
    </div>
  </div>
  <p>
    <strong>TIP:</strong> check out <a href="https://csstree.github.io/docs/validator.html">CSS Tree validator</a><br/>
    <strong>TIP #2:</strong> check out <a href="https://drafts.csswg.org/mediaqueries/">MQ Level 4 draft</a>
  </p>
</div>

{# ---------------------------------------------- #}

<script>
  window.addEventListener("load", pageFullyLoaded, false);
  function pageFullyLoaded(e) {
    // Vue.config.productionTip = false;
    if (Vue && isMediaDescriptor) {
      function isStr(something) {
        return typeof something === "string";
      }
      function isObj(something) {
        return typeof isObj === "object";
      }
      const { isMediaD } = isMediaDescriptor;
      const myStorage = window.localStorage;
      const storageKey = "codsen_play_{{ packageName }}";
      const initial = `screeen and (color)`;
      window.Event = new Vue();
      new Vue({
        el: "#app",
        data: {
          text1: initial,
        },
        mounted: function () {
          const retrieved = myStorage.getItem(storageKey);
          if (isStr(retrieved) && retrieved.length) {
            this.text1 = retrieved;
          } else {
            this.text1 = initial;
          }
          this.$refs.in.focus();
        },
        computed: {
          text2: function () {
            if (isStr(this.text1)) {
              return JSON.stringify(isMediaD(this.text1), null, 4);
            }
            return "";
          },
        },
        watch: {
          text1: function () {
            // dump the input into the local storage:
            if (isStr(this.text1) && this.text1.length) {
              myStorage.setItem(storageKey, this.text1);
            } else {
              myStorage.setItem(storageKey, "");
            }
          },
        },
        methods: {
          example0: function(event) {
            this.text1 = initial;
          },
          example1: function(event) {
            this.text1 = `screen and (color) projection and (color)`;
          },
          example2: function(event) {
            this.text1 = `screen and print`;
          },
          example3: function(event) {
            this.text1 = `only`;
          },
          example4: function(event) {
            this.text1 = `not (monochrome)`;
          },
          example5: function(event) {
            this.text1 = `not (width <= -100px)`;
          },
          example6: function(event) {
            this.text1 = `only (screen))`;
          },
          example7: function(event) {
            this.text1 = `screen and ()`;
          },
          example8: function(event) {
            this.text1 = `not screen and (monochrome) \tand`;
          },
        }
      });
    }
  }
</script>