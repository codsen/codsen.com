<h2>{{ packageName }} <sup title="current version is {{ packageJsons[packageName].version }}" aria-label="current version is {{ packageJsons[packageName].version }}">{{ packageJsons[packageName].version }}</sup></h2>
<div id="app">
  <button v-on:click="example4">initial</button> <button v-on:click="example1">broken nbsp</button> <button v-on:click="example2">double encoding</button> <button v-on:click="example3">raw semi's</button>
  <div class="playground-app">
    <div>
      <h3>Put a string</h3>
      <textarea ref="in" v-model="text1" placeholder="put some code here"></textarea>
    </div>
    <div>
      <h3>Program returns Ranges <a href="/ranges/">???</a></h3>
      <textarea ref="out" v-model="text2" readonly></textarea>
    </div>
    <div>
      <h3>Applied Ranges <a href="/os/ranges-apply/">???</a></h3>
      <textarea ref="applied" v-model="text3" readonly></textarea>
    </div>
  </div>
  <p>
    Reported <a href="/os/string-fix-broken-named-entities/#optsentitycatchercb">healthy entity</a> locations: <span class="highlighted">{% raw %}{{ healthyEntityLocations }}{% endraw %}</span>. Reported non-entity, <a href="/os/string-fix-broken-named-entities/#optstextampersandcatchercb">raw ampersand</a> locations: <span class="highlighted">{% raw %}{{ ampLocations }}{% endraw %}</span>.
  </p>
  <p>
    <strong>TIP:</strong> you can use the callback <code>opts.cb</code> and retrieve way more than just <a href="/ranges/">ranges</a>! See the <a href="/os/string-fix-broken-named-entities/#optscb-a-callback-function">readme section</a>.<br/>
    <strong>TIP #2:</strong> we're using the same string indexing principles as in <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice"><code>String.prototype.slice()</code></a>.
  </p>
</div>

{# ---------------------------------------------- #}

<script>
  window.addEventListener("load", pageFullyLoaded, false);
  function pageFullyLoaded(e) {
    // Vue.config.productionTip = false;
    if (Vue && stringFixBrokenNamedEntities && rangesApply) {
      function isStr(something) {
        return typeof something === "string";
      }
      function isObj(something) {
        return typeof isObj === "object";
      }
      const { fixEnt } = stringFixBrokenNamedEntities;
      const { rApply } = rangesApply;
      const myStorage = window.localStorage;
      const storageKey = "codsen_play_{{ packageName }}";
      const initial = `&poud; & &pound;`;
      window.Event = new Vue();
      new Vue({
        el: "#app",
        data: {
          text1: initial,
        },
        mounted: function () {
          const retrieved = myStorage.getItem(storageKey);
          if (typeof retrieved === "string" && retrieved.length) {
            this.text1 = retrieved;
          } else {
            this.text1 = initial;
          }
          this.$refs.in.focus();
        },
        computed: {
          text2: function () {
            if (typeof this.text1 === "string") {
              return JSON.stringify(fixEnt(this.text1), null, 4);
            }
            return "";
          },
          text3: function () {
            if (typeof this.text1 === "string") {
              return rApply(this.text1, fixEnt(this.text1));
            }
            return "";
          },
          ampLocations: function () {
            if (typeof this.text1 === "string") {
              const gathered = [];
              fixEnt(this.text1, {
                textAmpersandCatcherCb: idx => {
                  gathered.push(idx);
                }
              })
              return gathered.length ? gathered : "none";
            }
            return "";
          },
          healthyEntityLocations: function () {
            if (typeof this.text1 === "string") {
              const gathered = [];
              fixEnt(this.text1, {
                entityCatcherCb: idx => {
                  gathered.push(idx);
                }
              })
              return gathered.length ? gathered : "none";
            }
            return "";
          }
        },
        watch: {
          text1: function () {
            // dump the input into the local storage:
            if (isStr(this.text1) && this.text1.length) {
              myStorage.setItem(storageKey, this.text1);
            } else {
              myStorage.setItem(storageKey, "");
            }
          },
        },
        methods: {
          example1: function(event) {
            this.text1 = `abc &nsp; xyz`
          },
          example2: function(event) {
            this.text1 = `double&amp;nbsp;encoding`
          },
          example3: function(event) {
            this.text1 = `&pund; & &pond; & &poud;`
          },
          example4: function(event) {
            this.text1 = initial
          },
        }
      });
    }
  }
</script>